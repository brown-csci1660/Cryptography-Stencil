#!/usr/bin/env python3

import sys
import time
import subprocess


def main(args):
    if not ((len(args) == 1) or (len(args) == 2)):
        print("Usage: ./sol <path to ivy binary to attack> [test key]\n")
        exit(1)

    ivy_path = args[0]

    # Idea: we can perform our attack automatically by running
    # the client binary as a subprocess--this allows us to
    # repeatedly send commands and read the output as if we were
    # entering input manually, just much faster.

    # Build a list with the command to run the client
    cmd = [
        ivy_path,
    ]

    if len(args) == 2: # Add the test key as an argument, if specified
        test_key = args[1]
        check_test_key(test_key)
        cmd.append(test_key)

    ivy_process = subprocess.Popen(cmd,
                                   stdin=subprocess.PIPE,
                                   stdout=subprocess.PIPE,
                                   encoding="utf-8")

    # Objects for reading/writing to the process' stdin/stdout
    ivy_stdin   = ivy_process.stdin
    ivy_stdout  = ivy_process.stdout

    # TODO: Implement your attack here.
    #
    # You can send data to the stdin of the ivy binary with the following:
    #
    #   ivy_stdin.write("aabbccdd\n")
    #   ivy_stdin.flush()    # Flush data to process (don't forget!)
    #
    # You can read the next line from the ivy binary's stdout with
    # the following:
    #
    #   ivy_stdout.readline()

    # Here's an example of how to use readline() to get the first
    # line the client prints to stdout
    first_response = ivy_stdout.readline()

    response_string = first_response.strip()
    first_iv = bytes.fromhex(response_string.split(" ")[0])
    first_ciphertext = bytes.fromhex(response_string.split(" ")[1])

    print("First IV:  {}, First ciphertext:  {}"
          .format(first_iv.hex(), first_ciphertext.hex()))

    # TODO: When done, print the recovered key
    # When you have determined the key, print it to stdout as an
    # 8-byte hex string (eg. ababababcdcdcdcd), followed by a
    # newline.  This should be your program's last line of
    # output.  Here's an example:
    # some_key = bytes.fromhex("ababababcdcdcdcd")
    # print(some_key.hex())


def check_test_key(key):
    try:
        as_bytes = bytes.fromhex(key)

        if len(as_bytes) != 8:
            raise ValueError("Test key must be 8 bytes")
    except Exception as e:
        raise ValueError("Invalid test key format:  {}".format(str(e)))


if __name__ == "__main__":
    main(sys.argv[1:])
