#!/usr/bin/env python3

import sys
import time
import subprocess

def main(args):
    if len(args) != 1:
        print("Usage: ./sol <path to ivy binary to attack>\n")
        exit(1)

    ivy_path = args[0]

    # Idea: we can perform our attack automatically by running
    # the router binary as a subprocess--this allows us to
    # repeatedly send commands and read the output as if we were
    # entering input manually, just much faster.
    ivy_process = subprocess.Popen(ivy_path,
                                   stdin=subprocess.PIPE,
                                   stdout=subprocess.PIPE,
                                   encoding="utf-8")

    # Objects for reading/writing to the process' stdin/stdout
    ivy_stdin   = ivy_process.stdin
    ivy_stdout  = ivy_process.stdout

    # TODO: Implement your attack here.
    #
    # You can send data to the stdin of the ivy binary with the following:
    #
    #   ivy_stdin.write("aabbccdd\n")
    #   ivy_stdin.flush()    # Flush data to process (don't forget!)
    #
    # You can read the next line from the ivy binary's stdout with
    # the following:
    #
    #   ivy_stdout.readline()

    # Here's an example of how to use readline() to get the first
    # line the router prints to stdout
    first_response = ivy_stdout.readline()

    response_string = first_response.strip()
    first_iv = bytes.fromhex(response_string.split(" ")[0])
    first_ciphertext = bytes.fromhex(response_string.split(" ")[1])

    print("First IV:  {}, First ciphertext:  {}"
          .format(first_iv.hex(), first_ciphertext.hex()))


if __name__ == "__main__":
    main(sys.argv[1:])
