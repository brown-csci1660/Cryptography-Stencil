#!/usr/bin/env python3

"""
Main stencil file for the "Keys" problem
"""

import sys
import fileinput

# Import functions for cipher used in this problem (see cipher.py)
from cipher import encrypt, decrypt, double_encrypt, double_decrypt

def main(args):
        if len(args) != 1:
                print("Usage: ./sol <path to pairs file>\n")
                exit(1)

        pairs_file = args[0]

        # Pairs is a list of tuples representing plaintext ciphertext
        # See the read_pairs() docstring for more info
        pairs = read_pairs(pairs_file)

        if len(pairs) == 0:
                print("Error: you must provide at least one plaintext ciphertext pair")
                sys.exit(1)

        #
        # TODO: Implement your attack here
        #
        # Note:  you have access to the encrypt/decrypt functions
        # for the cipher used in this problem--see cipher.py for info.
        #
        c = encrypt(0, bytes.fromhex("aabbccddaabbccdd"))
        print_keys(0, 0)


def print_keys(key1, key2):
        """
        Prints a message with the passed integer keys encded in hex.

        NOTE:  If your keys are bytes() objects, just use keys.hex() instead
        """
        print("Recovered key pair: ({:x}, {:x})".format(key1, key2))


def read_pairs(pairs_file):
        """Reads plaintext ciphertext pairs from pairs_file
        Expects the pairs to be of the form "plaintext ciphertext" with each on their own line
        where plaintext and ciphertext are 16 character strings represeing hex encoded numbers

        Returns:
                a list of tuples of length 2 containing (plaintext, ciphertext) where
                plaintext and ciphertext are each byte strings of length 8"""

        ret = []

        with open(pairs_file, "r") as fd:
                while True:
                        line = fd.readline()
                        if not line or line is None:
                                break

                        pair = line.strip().split(" ")

                        if len(pair) != 2:
                                error_handler('read invalid line. Expected lines of the form "<plaintext> <ciphertext>"')

                        if len(pair[0]) != 16:
                                error_handler('read invalid plaintext length')

                        if len(pair[1]) != 16:
                                error_handler('read invalid ciphertext length')

                        plaintext = bytes.fromhex(pair[0])
                        ciphertext = bytes.fromhex(pair[1])

                        if len(plaintext) != 8:
                                error_handler('plaintext must be 8 bytes')

                        if len(ciphertext) != 8:
                                error_handler('ciphertext must be 8 bytes')

                        ret.append( (plaintext, ciphertext) )

        return ret


def error_handler(message):
        """Prints an error message and then exits with error code 1"""
        print("Error:", message)
        sys.exit(1)


if __name__ == "__main__":
        main(sys.argv[1:])
